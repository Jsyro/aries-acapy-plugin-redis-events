version: '3'
services:
  redis-ui:
    image: patrikx3/p3x-redis-ui:latest
    ports:
      - 7843:7843
    volumes:
      - ./data/p3x-redis-ui-settings:/settings
    networks:
      - acapy_default
  redis-cluster:
    image: redis:latest
    container_name: cluster
    command: redis-cli --cluster create 172.28.0.101:6377 172.28.0.102:6378 172.28.0.103:6379 172.28.0.104:6380 172.28.0.105:6381 172.28.0.106:6382 --cluster-replicas 1 --cluster-yes
    environment:
      - REDISCLI_AUTH=${REDIS_PASSWORD}
    networks:
        acapy_default:
          ipv4_address: 172.28.0.107
    depends_on:
      - redis-node-1
      - redis-node-2
      - redis-node-3
      - redis-node-4
      - redis-node-5
      - redis-node-6
      - redis-ui
  redis-node-1:
      image: redis:latest
      container_name: node1
      command: ["redis-server", "/conf/redis.conf", "--port 6377"]
      environment:
        - REDISCLI_AUTH=${REDIS_PASSWORD}
      ports:
        - 6377:6377
      volumes:
        - ./redis.conf:/conf/redis.conf
      networks:
        acapy_default:
          ipv4_address: 172.28.0.101
  redis-node-2:
      image: redis:latest
      container_name: node2
      command: ["redis-server", "/conf/redis.conf", "--port 6378"]
      environment:
        - REDISCLI_AUTH=${REDIS_PASSWORD}
      ports:
        - 6378:6378
      volumes:
        - ./redis.conf:/conf/redis.conf
      networks:
        acapy_default:
          ipv4_address: 172.28.0.102
  redis-node-3:
      image: redis:latest
      container_name: node3
      command: ["redis-server", "/conf/redis.conf", "--port 6379"]
      environment:
        - REDISCLI_AUTH=${REDIS_PASSWORD}
      ports:
        - 6379:6379
      volumes:
        - ./redis.conf:/conf/redis.conf
      networks:
        acapy_default:
          ipv4_address: 172.28.0.103
  redis-node-4:
      image: redis:latest
      container_name: node4
      command: ["redis-server", "/conf/redis.conf", "--port 6380"]
      environment:
        - REDISCLI_AUTH=${REDIS_PASSWORD}
      ports:
        - 6380:6380
      volumes:
        - ./redis.conf:/conf/redis.conf
      networks:
        acapy_default:
          ipv4_address: 172.28.0.104
  redis-node-5:
      image: redis:latest
      container_name: node5
      command: ["redis-server", "/conf/redis.conf", "--port 6381"]
      environment:
        - REDISCLI_AUTH=${REDIS_PASSWORD}
      ports:
        - 6381:6381
      volumes:
        - ./redis.conf:/conf/redis.conf
      networks:
        acapy_default:
          ipv4_address: 172.28.0.105
  redis-node-6:
      image: redis:latest
      container_name: node6
      command: ["redis-server", "/conf/redis.conf", "--port 6382"]
      environment:
        - REDISCLI_AUTH=${REDIS_PASSWORD}
      ports:
        - 6382:6382
      volumes:
        - ./redis.conf:/conf/redis.conf
      networks:
        acapy_default:
          ipv4_address: 172.28.0.106
  relay:
    image: redis-relay
    build:
      context: ..
      dockerfile: redis_relay/Dockerfile
    ports:
      - 8071:8081
    environment:
      - REDIS_SERVER_URL=redis://default:test1234@172.28.0.103:6379
      - TOPIC_PREFIX=acapy
      - STATUS_ENDPOINT_HOST=0.0.0.0
      - STATUS_ENDPOINT_PORT=7001
      - STATUS_ENDPOINT_API_KEY=test_api_key_1
      - INBOUND_TRANSPORT_CONFIG=[["http", "0.0.0.0", "8071"],["ws", "0.0.0.0", "8081"]]
      - WAIT_BEFORE_HOSTS=15
      - WAIT_HOSTS=redis-node-3:6379
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=60
    depends_on:
      - redis-cluster
    networks:
      - acapy_default
  deliverer:
    image: redis-deliverer
    build:
      context: ..
      dockerfile: redis_deliverer/Dockerfile
    environment:
      - REDIS_SERVER_URL=redis://default:test1234@172.28.0.103:6379
      - TOPIC_PREFIX=acapy
      - STATUS_ENDPOINT_HOST=0.0.0.0
      - STATUS_ENDPOINT_PORT=7002
      - STATUS_ENDPOINT_API_KEY=test_api_key_2
      - WAIT_BEFORE_HOSTS=15
      - WAIT_HOSTS=redis-node-3:6379
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=60
    depends_on:
      - redis-cluster
    networks:
      - acapy_default
  echo:
    image: dbluhm/echo-agent:6c22a88
    ports:
      - "3002:3002"
    command: --host 0.0.0.0 --port 3002 --log-level debug
    networks:
      - acapy_default

  #*************************************************************
  # acapy-redis_queue: aca-py that produces redis events.      *
  #*************************************************************
  agent:
    image: agent
    build:
      context: ..
      dockerfile: docker/Dockerfile
    ports:
      - 3001:3001
    depends_on:
      - redis-cluster
      - relay
      - deliverer
    command: start -it redis_queue.v1_0.inbound redis 0 -ot redis_queue.v1_0.outbound -e http://relay:8071 --no-ledger --admin 0.0.0.0 3001 --admin-insecure-mode --plugin redis_queue.v1_0.events --log-level debug
    environment:
      - WAIT_BEFORE_HOSTS=15
      - WAIT_HOSTS=redis-node-3:6379, relay:8071, relay:8081
      - WAIT_HOSTS_TIMEOUT=120
      - WAIT_SLEEP_INTERVAL=1
      - WAIT_HOST_CONNECT_TIMEOUT=60
    networks:
      - acapy_default
  #*************************************************************
  # tester: drives tests in a                                  *
  # "Juggernaut" fashion!                                      *
  #*************************************************************
  tests:
      container_name: juggernaut
      build:
        context: .
        dockerfile: Dockerfile.test.runner
      environment:
        - WAIT_BEFORE_HOSTS=15
        - WAIT_HOSTS=echo:3002, agent:3001, redis-node-3:6379
        - WAIT_HOSTS_TIMEOUT=120
        - WAIT_SLEEP_INTERVAL=1
        - WAIT_HOST_CONNECT_TIMEOUT=60
        - AGENT_HOST=agent
        - AGENT_PORT=3000
        - AGENT_BACKCHANNEL_PORT=3001
        - ECHO_ENDPOINT=http://echo:3002
      depends_on:
        - redis-cluster
        - agent
        - echo
      networks:
        - acapy_default
networks:
  acapy_default:
    external: true
    name: ${NETWORK_NAME}
